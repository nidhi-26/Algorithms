/*
	Author: Nidhi Bothra
	Create Date: 2019-07-02
	Description: Given a list of numbers and a number k, return whether any two numbers from the list add up to k.
					For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.

*/

#include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#include <map>

using namespace std;

bool doesArrayHaveTwoCandidatesBySortingArray(int a[], int n, int sum) {
	std::sort(a, a+n);
	
	int l = 0, r = n - 1;
	while( l < r ) {
		if (a[l] + a[r] == sum)
			return 1;
		else
			if (a[l] + a[r] < sum) 
				l++;
			else
				r--;
	} 
	return 0;
}

bool doesArrayHaveTwoCandidatesUsingMap(int a[], int n, int sum) {
	map<int, int> umap;
	
	int i = 0;
	for (i = 0; i < n; i++) {
		umap[a[i]] = 1;
		if (umap.find(sum - a[i]) != umap.end())
			return 1;
	}
	return 0;
}

int main() {
	int a[] = {10, 15, 3, 7}; 
    int sum = 19; 
    int n = sizeof(a) / sizeof(a[0]); 
	//		Method 1: First sort array in ascending order, then starting moving from both sides on some conditions
    if (doesArrayHaveTwoCandidatesBySortingArray(a, n, sum)) 
        cout << "Array has two elements with given sum"<<endl; 
    else
        cout << "Array does not have two elements with given sum"<<endl; 
        
    //		Method 2: Use map and check whether the difference of current and sum is already there or not
    if (doesArrayHaveTwoCandidatesUsingMap(a, n, sum)) 
        cout << "Array has two elements with given sum"<<endl; 
    else
        cout << "Array does not have two elements with given sum"<<endl; 
         
    return 0;
}

